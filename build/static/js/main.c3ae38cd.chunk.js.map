{"version":3,"sources":["components/expense/Expense.jsx","components/form/Form.jsx","components/month/Month.jsx","components/budget/year.js","components/budget/Budget.jsx","components/board/Board.jsx","components/app/App.js","serviceWorker.js","index.js"],"names":["Expense","props","useState","toggleRemove","toggleRemoveStatus","handleEditClick","className","exp","name","amount","onClick","id","deleteExp","Form","type","placeholder","value","onChange","handleName","onSubmit","handleSubmitForm","handleAmount","Month","attemptSavedExpenses","localStorage","getItem","month","JSON","parse","monthlyBudget","remainingMonth","updateMonthlyRemaining","expenses","setExpenses","usedMonth","setMonthUsed","editMonth","editMonthState","setName","setAmount","useEffect","total","reduce","acc","cur","parseInt","setItem","stringify","editToggle","deleteExpense","e","expenseCopy","filter","expense","target","map","preventDefault","uuid","addExpense","console","log","uuidv4","require","v4","year","key","Budget","updateMonthlyBudget","Math","floor","yearlyBudget","slice","Board","attemptSavedBudget","updateYearlyBudget","budgetSet","setBudgetStatus","handleSubmit","alert","clear","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c3ae38cd.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst Expense = (props) => {\r\n  const [toggleRemove, toggleRemoveStatus] = useState(false);\r\n  const handleEditClick = () => toggleRemoveStatus(!toggleRemove);\r\n\r\n  return toggleRemove ? (\r\n    <div className=\"month__expenses--entry\">\r\n      <p>{props.exp.name}</p>\r\n      <p> - </p>\r\n      <p className=\"month__expenses--entry--amount\">${props.exp.amount}</p>\r\n      <button className=\"month__expenses--edit\" onClick={handleEditClick}/>\r\n      <button className=\"month__expenses--delete\" id={props.exp.id} onClick={props.deleteExp}>X</button>  \r\n    </div>\r\n  ) : (\r\n    <div className=\"month__expenses--entry\">\r\n      <p>{props.exp.name}</p>\r\n      <p> - </p>\r\n      <p className=\"month__expenses--entry--amount\">${props.exp.amount}</p>\r\n      <button className=\"month__expenses--edit\" onClick={handleEditClick}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Expense; ","import React from 'react';\r\n\r\nconst Form = (props) => {\r\n  return (\r\n  <aside> \r\n    <form>\r\n      <input type=\"text\" name=\"name\" placeholder=\"Enter the expense...\" value={props.name} onChange={props.handleName}/>\r\n    </form>\r\n    <form onSubmit={props.handleSubmitForm}>\r\n      <input type=\"number\" name=\"amount\" placeholder=\"Enter the price...\" value={props.amount} onChange={props.handleAmount}/>\r\n    </form>\r\n  </aside>\r\n  )\r\n}\r\n\r\nexport default Form;","import React, { useState, useEffect } from 'react';\r\nimport Expense from '../expense/Expense';\r\nimport { uuid } from 'uuidv4';\r\nimport Form from '../form/Form';\r\nimport './month.css';\r\n\r\nconst Month = (props) => {\r\n  const attemptSavedExpenses = localStorage.getItem(props.month) ? JSON.parse(localStorage.getItem(props.month)) : [];\r\n\r\n  const [remainingMonth, updateMonthlyRemaining] = useState(props.monthlyBudget);\r\n  const [expenses, setExpenses] = useState(attemptSavedExpenses);\r\n  const [usedMonth, setMonthUsed] = useState(0);\r\n\r\n  const [editMonth, editMonthState] = useState(false);\r\n  const [name, setName] = useState('')\r\n  const [amount, setAmount] = useState('')\r\n\r\n  useEffect(() => {\r\n    updateMonthlyRemaining(props.monthlyBudget - usedMonth);\r\n  }, [props.monthlyBudget, usedMonth]);\r\n\r\n  useEffect(() => {\r\n    const total = expenses.reduce((acc, cur) => acc += parseInt(cur.amount), 0);\r\n    setMonthUsed(total);\r\n    updateMonthlyRemaining(props.monthlyBudget - total);\r\n  }, [props.monthlyBudget, expenses]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(props.month, JSON.stringify(expenses))\r\n  }, [props.month, expenses])\r\n\r\n  const handleClearExpenses = () => setExpenses([]);\r\n\r\n  const editToggle = () => editMonthState(!editMonth);\r\n\r\n  const handleName = (e) => setName(e.target.value);\r\n  \r\n  const handleAmount = (e) => setAmount(e.target.value);\r\n\r\n  const deleteExpense = (e) => {\r\n    let expenseCopy = expenses;\r\n    expenseCopy = expenseCopy.filter(expense => expense.id !== e.target.id);\r\n    setExpenses(expenseCopy);\r\n  }\r\n  \r\n  const addExpense = () => {\r\n    const id = uuid();\r\n    const expense = { name, amount, id }\r\n    setExpenses([...expenses, expense]);\r\n    setName('');\r\n    setAmount('');\r\n  }\r\n\r\n  const handleSubmitForm = (e) => {\r\n    e.preventDefault();\r\n    if (name !== '' && amount > 0) {\r\n      addExpense();\r\n    } else {\r\n      console.log('Invalid expense name or the amount')\r\n    }\r\n  }\r\n\r\n  return editMonth ? (\r\n    <section className=\"month--section\">\r\n      <h2 className=\"month__name\">{props.month}</h2>\r\n      \r\n      <aside className=\"month__expenses\">\r\n\r\n        <section className=\"month__expenses--numbers\">\r\n            <p className=\"month__expenses--numbers--header\">Budget:</p> \r\n            <p>{props.monthlyBudget}</p>\r\n            <p className=\"month__expenses--numbers--header\">Remaining:</p>\r\n            <p>{remainingMonth}</p>\r\n            <p className=\"month__expenses--numbers--header\">Used:</p> \r\n            <p>{usedMonth}</p>\r\n        </section>\r\n\r\n        <div className=\"month__expenses--table\">\r\n          {expenses.map(exp => (\r\n            <Expense deleteExpense={deleteExpense} exp={exp}/>\r\n          ))}\r\n        </div>\r\n\r\n      </aside>\r\n\r\n      <div className=\"month__buttons\">\r\n        <button className=\"month__buttons--goBack\" onClick={editToggle}/>\r\n        <Form \r\n          handleSubmitForm={handleSubmitForm}\r\n          amount={amount}\r\n          name={name}\r\n          handleName={handleName}\r\n          handleAmount={handleAmount}\r\n        />\r\n        <button className=\"month__buttons--deletebtn\" onClick={handleClearExpenses}/>\r\n      </div>\r\n\r\n    </section>\r\n  ) : (\r\n    <section className=\"month--section\">\r\n      <h2 className=\"month__name\">{props.month}</h2>\r\n      <p>{usedMonth}/{props.monthlyBudget}</p>\r\n      <button className=\"month__button\" onClick={editToggle}>Add Expenses</button>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Month;","const { v4: uuidv4 } = require('uuid');\r\nconst year = [\r\n  {\r\n    key: uuidv4(),\r\n    month: 'January'\r\n  },\r\n  {\r\n    key: uuidv4(),\r\n    month: 'February'\r\n  },\r\n  {\r\n    key: uuidv4(),\r\n    month: 'March'\r\n  },\r\n  {\r\n    key: uuidv4(),\r\n    month: 'April'\r\n  },\r\n  {\r\n    key: uuidv4(),\r\n    month: 'May'\r\n  },\r\n  {\r\n    key: uuidv4(),\r\n    month: 'June'\r\n  },\r\n  {\r\n    key: uuidv4(),\r\n    month: 'July'\r\n  },\r\n  {\r\n    key: uuidv4(),\r\n    month: 'August'\r\n  },\r\n  {\r\n    key: uuidv4(),\r\n    month: 'September'\r\n  },\r\n  {\r\n    key: uuidv4(),\r\n    month: 'October'\r\n  },\r\n  {\r\n    key: uuidv4(),\r\n    month: 'November'\r\n  },\r\n  {\r\n    key: uuidv4(),\r\n    month: 'December'\r\n  },\r\n  {\r\n    key: uuidv4(),\r\n    month: 'Buffer'\r\n  },\r\n]\r\n\r\nexport default year; ","import React, { useEffect, useState } from 'react';\r\nimport Month from '../month/Month';\r\nimport year from './year';\r\nimport './budget.css';\r\n\r\nconst Budget = (props) => {\r\n  const [monthlyBudget, updateMonthlyBudget] = useState(null);\r\n\r\n  useEffect(() => {\r\n    updateMonthlyBudget(Math.floor(props.yearlyBudget/12));\r\n  }, [props.yearlyBudget])\r\n\r\n  return (\r\n      <section className=\"month__wrapper\">\r\n        {year.slice(0,12).map(month => (\r\n          <Month key={month.key} id={month.key} monthlyBudget={monthlyBudget} month={month.month}/>    \r\n        ))}\r\n      </section> \r\n    )\r\n}\r\n\r\nexport default Budget;","import React, { useState, useEffect } from 'react';\r\nimport Budget from '../budget/Budget';\r\nimport './board.css';\r\n\r\nconst Board = () => {\r\n  const attemptSavedBudget  = localStorage.getItem('budget') ? JSON.parse(localStorage.getItem('budget')) : \"\";\r\n  const [yearlyBudget, updateYearlyBudget] = useState(attemptSavedBudget );\r\n\r\n  const [budgetSet, setBudgetStatus] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    if(attemptSavedBudget !== \"\") setBudgetStatus(true);\r\n  }, [attemptSavedBudget ])\r\n\r\n  const handleChange = (e) => {\r\n    const { target } = e;\r\n    const { value } = target;\r\n    updateYearlyBudget(value);\r\n  };\r\n\r\n  const resetBudget = () => {\r\n    handleSubmit();\r\n    localStorage.clear();\r\n    updateYearlyBudget(\"\");\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    if (e) e.preventDefault();\r\n    if(yearlyBudget !== \"\") {\r\n      localStorage.setItem('budget', JSON.stringify(yearlyBudget))\r\n      setBudgetStatus(budgetSet => ! budgetSet);\r\n    } else {\r\n      alert('Invalid budget, please enter a valid number');\r\n    }\r\n  };\r\n\r\n  return budgetSet ? (\r\n    <section className=\"budget__wrapper\">\r\n      <aside className=\"budget__header--wrapper\">\r\n        <h1 className=\"budget__header\">Total: {yearlyBudget}</h1>\r\n        <button className=\"budget__resetbutton\" onClick={resetBudget}>X</button>\r\n      </aside>\r\n      <Budget yearlyBudget={yearlyBudget} />\r\n    </section>\r\n  ) : (\r\n    <aside>\r\n      <form className=\"form__wrapper\" onSubmit={handleSubmit}>\r\n        <h1 className=\"form__header\">Budget Manager</h1>\r\n        <input type=\"number\" name=\"budget\" placeholder=\"Enter yearly budget here\" className=\"form__input\" onChange={handleChange}/>\r\n        <button className=\"form__button\" type=\"submit\">Submit</button>\r\n      </form>\r\n    </aside>\r\n  )\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport Board from '../board/Board';\r\nimport './app.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <main>\r\n      <header className=\"app__header\">\r\n        <Board />\r\n      </header>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}